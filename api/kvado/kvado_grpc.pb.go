// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: kvadoProto.proto

package kvado

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

type AuthorRequest struct {
	AuthorId int32 `protobuf:"varint,1,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
}

type BookRequest struct {
	BookName string `protobuf:"string,1,opt,name=book_name,json=bookName,proto3" json:"book_name,omitempty"`
}

type Book struct {
	BookId   int32  `protobuf:"varint,1,opt,name=book_id,json=bookId,proto3" json:"book_id,omitempty"`
	BookName string `protobuf:"string,2,opt,name=book_name,json=bookName,proto3" json:"book_name,omitempty"`
}

type BookResponse struct {
	Books []*Book `protobuf:"bytes,1,rep,name=books,proto3" json:"books,omitempty"`
}

type Author struct {
	AuthorId   int32  `protobuf:"varint,1,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
	AuthorName string `protobuf:"string,2,opt,name=author_name,json=authorName,proto3" json:"author_name,omitempty"`
}

type AuthorResponse struct {
	Authors []*Author `protobuf:"bytes,1,rep,name=authors,proto3" json:"authors,omitempty"`
}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	YourService_FindBooksByAuthor_FullMethodName = "/kvadoProto.YourService/FindBooksByAuthor"
	YourService_FindAuthorsByBook_FullMethodName = "/kvadoProto.YourService/FindAuthorsByBook"
)

// YourServiceClient is the client API for YourService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type YourServiceClient interface {
	FindBooksByAuthor(ctx context.Context, in *AuthorRequest, opts ...grpc.CallOption) (*BookResponse, error)
	FindAuthorsByBook(ctx context.Context, in *BookRequest, opts ...grpc.CallOption) (*AuthorResponse, error)
}

type yourServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewYourServiceClient(cc grpc.ClientConnInterface) YourServiceClient {
	return &yourServiceClient{cc}
}

func (c *yourServiceClient) FindBooksByAuthor(ctx context.Context, in *AuthorRequest, opts ...grpc.CallOption) (*BookResponse, error) {
	out := new(BookResponse)
	err := c.cc.Invoke(ctx, YourService_FindBooksByAuthor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yourServiceClient) FindAuthorsByBook(ctx context.Context, in *BookRequest, opts ...grpc.CallOption) (*AuthorResponse, error) {
	out := new(AuthorResponse)
	err := c.cc.Invoke(ctx, YourService_FindAuthorsByBook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// YourServiceServer is the server API for YourService service.
// All implementations must embed UnimplementedYourServiceServer
// for forward compatibility
type YourServiceServer interface {
	FindBooksByAuthor(context.Context, *AuthorRequest) (*BookResponse, error)
	FindAuthorsByBook(context.Context, *BookRequest) (*AuthorResponse, error)
	mustEmbedUnimplementedYourServiceServer()
}

// UnimplementedYourServiceServer must be embedded to have forward compatible implementations.
type UnimplementedYourServiceServer struct {
}

func (UnimplementedYourServiceServer) FindBooksByAuthor(context.Context, *AuthorRequest) (*BookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindBooksByAuthor not implemented")
}
func (UnimplementedYourServiceServer) FindAuthorsByBook(context.Context, *BookRequest) (*AuthorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAuthorsByBook not implemented")
}
func (UnimplementedYourServiceServer) mustEmbedUnimplementedYourServiceServer() {}

// UnsafeYourServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to YourServiceServer will
// result in compilation errors.
type UnsafeYourServiceServer interface {
	mustEmbedUnimplementedYourServiceServer()
}

func RegisterYourServiceServer(s grpc.ServiceRegistrar, srv YourServiceServer) {
	s.RegisterService(&YourService_ServiceDesc, srv)
}

func _YourService_FindBooksByAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YourServiceServer).FindBooksByAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: YourService_FindBooksByAuthor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YourServiceServer).FindBooksByAuthor(ctx, req.(*AuthorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YourService_FindAuthorsByBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YourServiceServer).FindAuthorsByBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: YourService_FindAuthorsByBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YourServiceServer).FindAuthorsByBook(ctx, req.(*BookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// YourService_ServiceDesc is the grpc.ServiceDesc for YourService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var YourService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kvadoProto.YourService",
	HandlerType: (*YourServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindBooksByAuthor",
			Handler:    _YourService_FindBooksByAuthor_Handler,
		},
		{
			MethodName: "FindAuthorsByBook",
			Handler:    _YourService_FindAuthorsByBook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kvadoProto.proto",
}
